# 1. Create a user
mutation CreateUser {
  createUser(input: {
    username: "john"
    email: "john@example.com"
    password: "Password123!"
    first_name: "John"
    last_name: "Doe"
  }) {
    sequential_id
    username
  }
}

# 2. Login to get token
mutation Login {
  login(input: {
    username: "john"
    password: "Password123!"
  }) {
    token
  }
}

# 3. Click "HTTP HEADERS" at bottom of playground and paste:
# {
#   "Authorization": "token-from-login-response"
# }
# For example, if login returned token "abc123", paste:
# {
#   "Authorization": "abc123"
# }

# 4. Create client with service enum
mutation CreateClient {
  createClient(input: {
    phone: "123-456-7890"
    service: HAIRCUT  # Use uppercase enum value without quotes
    notes: "New client"
  }) {
    id
    service  # Returns "Hair Cut"
    phone
    notes
  }
}

# 5. Query user with client profile
query GetUser {
  user(sequential_id: 1) {
    username
    client_profile {
      service  # Returns "Hair Cut"
      phone
      notes
    }
  }
}

# Available service types (use the enum value on the left):
# HAIRCUT   -> displays as "Hair Cut"
# MANICURE  -> displays as "Manicure"
# PEDICURE  -> displays as "Pedicure"
# FACIAL    -> displays as "Facial"
# MASSAGE   -> displays as "Massage"
# HAIRCOLOR -> displays as "Hair Color"
# HAIRSTYLE -> displays as "Hair Style"
# MAKEUP    -> displays as "Makeup"
# WAXING    -> displays as "Waxing"
# OTHER     -> displays as "Other"

# Note: For HTTP Headers in GraphQL playground:
# 1. Click "HTTP HEADERS" at bottom
# 2. Paste the header JSON exactly as shown
# 3. Replace token with the one from login response
# 4. Make sure it's valid JSON (double quotes, no trailing comma)
